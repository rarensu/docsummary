**Task: Populate "starts_with", "ends_with", and "node_content"**
This prompt corresponds to Step 2 of the multi-step workflow described in the system prompt.

In your preparation phase:
1: compare inputXY.json and chunkXY.txt (or whatever their actual names are) to verify that they contain at least one matching label.
2: make a list of expected delimiters for the document elements in this chunk. For example, \section and \begin{figure}. Not all possible document element types will appear in every chunk.
3: pick one label to serve as your test case. Choose strings to mark the beginning and ending of that labeled document element. Aim to choose the shortest possible strings that are still unique in this chunk. Verify that the strings are unique in this chunk. Ideally, they should contain text that is specific enough to most likely not appear in any other document chunk. For example:
{
"prefix": "Section",
"label":"section:foo",
"starts_with": "\section{The Amazing Foo}\label{section:foo}\n",
"ends_with": "% end of section \label{section:foo}\n"
}

*Suggestions for locating the start and end of a document element*:
- Standard latex commands: Most document element types correspond to a standard latex command to delimit their starting point. E.g., \section, \begin{figure} \footnote. Usually, the nearest such delimiter that preceeds a \label command is the beginning of the element.
- Custom end delimiters: I have populated the chunk with custom end delimiters to help you find the ends of section-like elements. The template for these custom delimiters is: "% end of <prefix_lowercase> \label{<label>}". For example: "% end of subsection \label{section:intro-quantum}".
- Finding accurate "ends_with" values can be challenging if an explicit delimiter is not present. In that case, prioritize the following, in order of preference:
    1. Start of the next section at the same or higher level: Look for the beginning delimiter of the *next* section command (\section{, \chapter{, \part{ etc.) that appears *after* the current document element in the chunk.  This is often the most reliable marker for the end of the current section's content (if custom delimiters are not available). For example, if you are defining "ends_with" for a \subsection, look for the next \subsection{, \section{, \chapter{, or \part{.
    2. Start of a new environment:  Look for the beginning delimiter of a new LaTeX environment (\begin{figure}, \begin{table}, \begin{equation}, etc.) that appears after the current document element.  Environments often begin a new block of content after a section.
    3. Contextual keywords and transition phrases: Look for short phrases that signal the transition to a new topic or the end of the current section, such as "In the next section,", "Subsequently,", "In conclusion,", "Finally,". These can be helpful, but are less reliable than custom delimiters or section/environment delimiters.
    4. End of the current chunk: If none of the above delimiters or phrases are found *within the current chunk after the "starts_with" string*, then the "ends_with" string might simply be the end of the chunk itself.  This indicates that the current document element extends to the end of the provided text chunk.

Also in your preparation phase, 
4: Print the boundaries of the item's children, which are their "starts_with" and "ends_with" fields. For example:
{
// test item
"label":"section:foo"
"children":[
"section:foo_motivation",
"section:foo_experiment"
],
"child_boundaries":[
{
"starts_with": "\subsection{Motivation for Foo}\label{section:foo_motivation}\n",
"ends_with": "In the next subsection, we discuss a Foo experiment.\n"
},
{
"starts_with": "\subsection{Foo Experiment}\label{section:foo_experiment}\n",
"ends_with": "In the next section, we discuss a different topic named Bar.\n"
},
]
}
5: The idea is to extract the document element's content while skipping over the content of the child elements. This is defined to be the "node_content" for the test item. Verify that the concatenation of the intervals described below correctly extracts the "node_content" of the test item and excludes the test item's children. To clarify, since the "starts_with" and "ends_with" strings only *approximately* mark the positions of of a child element, you will have to use judgement about which characters from the string to include/exclude from "node_content". If the formula described below doesn't work for you, you might choose to define a new formula. 
// interval before first child
(item["starts_with"], item["child_boundaries"][0]["starts_with"]) +
// interval between first and second child
(item["child_boundaries"][0]["ends_with"], item["child_boundaries"][1]["starts_with"]) +
// intervals between other children
... + 
// interval after last child
(item["child_boundaries"][n-1]["ends_with"], item["ends_with"]) 

*Suggestions for choosing good quality "starts_with", "ends_with" values*:
- Custom End Delimiters: When possible, include a custom end delimiter (% end of ...) in the "ends_with" string, if it is present in the chunk.
- LaTeX commands: Prioritize including LaTeX commands (like \section{, \label{, \begin{figure}) in your string. These are often excellent and concise delimiters, especially for "starts_with" strings.
- Unique text: When possible, include a short, unique fragment of the title or heading in your string. Focus on the most distinctive words.
- Newline characters: Often, document elements start and end with newline characters (\n). Including these in your "starts_with" and "ends_with" strings can improve accuracy and conciseness.
- If uniqueness is difficult: you may need to include more surrounding text in your "starts_with" and "ends_with" strings to ensure uniqueness within the chunk. It is OK if the strings slightly overlap with neighboring elements or parent elements. They only need to approximately mark the position of the element.
- Strive to keep the strings as short as possible while maintaining uniqueness and accuracy.


In your response, output an updated data structure that includes "starts_with", "ends_with", and "node_content" fields for all items in the "tree" array. Copy "filename", "prefix", "label", "parent", and "children" from the input inputXY.json. Write new values for "response", "comment", and "status", as appropriate.
