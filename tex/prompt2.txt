**Task: Populate "node_content" and "node_summary"**
This prompt corresponds to Step 3 of the multi-step workflow described in the system prompt.

In your preparation phase: 
1: Compare inputXY.json and chunkXY.txt (or whatever their actual names are) to verify that they contain at least one matching label.  
2: Pick an item that has children to serve as your test case. Print the boundaries of the item's children, which are their "starts_with" and "ends_with" fields. For example:
{
// test item
"label":"section:foo"
"children":[
"section:foo_motivation",
"section:foo_experiment"
],
"child_boundaries":[
{
"starts_with": "\subsection{Motivation for Foo}\label{section:foo_motivation}\n",
"ends_with": "In the next subsection, we discuss a Foo experiment.\n"
},
{
"starts_with": "\subsection{Foo Experiment}\label{section:foo_experiment}\n",
"ends_with": "In the next section, we discuss a different topic named Bar.\n"
},
]
}
3: The idea is to extract the document element's content while skipping over the content of the child elements. This is defined to be the "node_content" for the test item. Verify that the concatenation of the intervals described below correctly extracts the "node_content" of the test item and excludes the test item's children. To clarify, since the "starts_with" and "ends_with" strings only *approximately* mark the positions of of a child element, you will have to use judgement about which characters from the string to include/exclude from "node_content". 
// interval before first child
(item["starts_with"], item["child_boundaries"][0]["starts_with"]) +
// interval between first and second child
(item["child_boundaries"][0]["ends_with"], item["child_boundaries"][1]["starts_with"]) +
// intervals between other children
... + 
// interval after last child
(item["child_boundaries"][n-1]["ends_with"], item["ends_with"]) 

4. Summarize "node_content" for your test item, briefly, omitting redundant statements and references to other elements. This is defined to be "node_summary". 

In your response, output an updated data structure that includes "node_content" and "node summary" fields for all items in the "tree" array. Copy "filename", "prefix", "label", "start_with", "ends_with", "parent", and "children" from the input inputXY.json. Write new values for "response", "comment", and "status", as appropriate. 
