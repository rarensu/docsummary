**Task: Populate "tree_summary" and "keywords"**
This prompt corresponds to Step 5 of the multi-step workflow described in the system prompt. The "node_summary" and "child_summary" fields should have been populated. It is expected that 'starts with" and "ends with" will have been omitted.

In your preparation phase, 
1: Compare inputXY.json and chunkXY.txt (or whatever their actual names are) to verify that they contain at least one matching label.  
2: Identify a "leaf" node, which is an item that has no children. Find its parent and its siblings (other children of the same parent). Hopefully, the parent node will likely have a small number of children and grandchildren. 
For example:
{
// starting leaf item
"label":"section:foo_motivation"
"parent":"section:foo" // search for this string among the other labels
"children":[] // or, field is missing. 
},
{
// parent of starting item 
"label":"section:foo" // matches the starting leaf item's parent string
"children":[
"section:foo_motivation",
"section:foo_experiment"
],
"node_content":"Introduces foo",
"child_summaries":[ // focus on these!
"A discussion of foo motivation.",
"A discussion of foo experiment."
]
// end of parent
},
{
// sibling of starting item
"label":"section:foo_experiment"
"parent":"section:foo"
"children":[] // or, field is missing. 
},
4. Verify that the identified parent item has a "node_summary" and "child_summaries". Summarize all of them together, briefly, omitting redundant statements. This is defined to be the "tree_summary" of the parent item. 
For example:
{
// parent
"label":"section:foo",
"tree_summary":"Introduces foo, the foo motivation, and the foo experiment."
}

This paragraph clarifies the "keyword" field. A keyword can be a single word or acronym ("CDMS"), a short phrase of 2-3 words ("superconducting quasiparticle"), or a key=value pair ("temperature=1mK") if the value is important and it isn't otherwise obvious where to find it (e.g., a table is an obvious place to look for values, so its entries aren't keywords). For the "keyword" field, choose approximately 2-5 concepts that are defined or significantly clarified within the "node_content", "title", "node_summary", and/or the "child_summaries". It's OK if a parent inherits some keywords from its children, but just the important ones; I don't want the top-level document element to end up with 20+ keywords. 

In your response, output an updated data structure that includes a "tree_summary" for each non-leaf item and a "keyword" field for each item (whether leaf or non-leaf). Copy "filename", "prefix", "label", "start_with", "ends_with", "parent", "children", "title", "node_content",  "node_summary", and "child_summaries" (if present) from the input inputXY.json. Write new values for "response", "comment", and "status", as appropriate. 
